openapi: 3.0.2
info:
  version: 1.0.0
  title: Contacts API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  description: |
    Це API для керування контактами. Підтримує авторизацію, повний CRUD функціонал, аватарки і email розсилку.

tags:
  - name: Contacts
    description: Операції з контактами

servers:
  - url: https://nodejs-hw-mongodb-c8vq.onrender.com

paths:
  /contacts/{contactId}:
    get:
      tags: [Contacts]
      summary: Отримати контакт за ID
      operationId: getContactById
      description: Повертає один контакт за його унікальним ідентифікатором.
      security:
        - bearerAuth: []
      parameters:
        - name: contactId
          in: path
          required: true
          description: Ідентифікатор контакту
          schema:
            type: string
      responses:
        '200':
          description: Контакт знайдено
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Successfully found contact!'
                  data:
                    $ref: './swagger/components/schemas/Contact.yaml'
        '401': { description: Неавторизований }
        '404': { description: Контакт не знайдено }
        '500': { description: Внутрішня помилка сервера }

    patch:
      tags: [Contacts]
      summary: Оновити контакт за ID
      operationId: updateContact
      description: Оновлює дані контакту.
      security:
        - bearerAuth: []
      parameters:
        - name: contactId
          in: path
          required: true
          description: Ідентифікатор контакту
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string, example: John Doe }
                email:
                  { type: string, format: email, example: john.doe@example.com }
                phone: { type: string, example: '+1234567890' }
              additionalProperties: false
      responses:
        '200':
          description: Контакт оновлено
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: integer, example: 200 }
                  message:
                    { type: string, example: 'Successfully updated contact!' }
                  data:
                    $ref: './swagger/components/schemas/Contact.yaml'
        '400': { description: Невірні дані запиту }
        '401': { description: Неавторизований }
        '404': { description: Контакт не знайдено }
        '500': { description: Внутрішня помилка сервера }

    delete:
      tags: [Contacts]
      summary: Видалити контакт за ID
      operationId: deleteContact
      description: Видаляє контакт за ID.
      security:
        - bearerAuth: []
      parameters:
        - name: contactId
          in: path
          required: true
          description: Ідентифікатор контакту
          schema:
            type: string
      responses:
        '200':
          description: Контакт видалено
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: integer, example: 200 }
                  message:
                    { type: string, example: 'Successfully deleted contact!' }
        '401': { description: Неавторизований }
        '404': { description: Контакт не знайдено }
        '500': { description: Внутрішня помилка сервера }

  /contacts:
    get:
      tags: [Contacts]
      summary: Отримати список контактів
      operationId: getContacts
      description: Повертає список контактів, підтримує фільтри.
      security:
        - bearerAuth: []
      parameters:
        - {
            name: page,
            in: query,
            schema: { type: integer, example: 1 },
            description: Номер сторінки,
          }
        - {
            name: perPage,
            in: query,
            schema: { type: integer, example: 10 },
            description: Кількість контактів на сторінці,
          }
        - {
            name: sortBy,
            in: query,
            schema: { type: string, example: name },
            description: Поле для сортування,
          }
        - {
            name: sortOrder,
            in: query,
            schema: { type: string, enum: [asc, desc], example: asc },
            description: Напрямок сортування,
          }
        - {
            name: type,
            in: query,
            schema: { type: string },
            description: Тип контакту,
          }
        - {
            name: isFavourite,
            in: query,
            schema: { type: boolean },
            description: Фільтр за улюбленими,
          }
      responses:
        '200':
          description: Список контактів
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: integer, example: 200 }
                  message:
                    { type: string, example: 'Successfully found contacts!' }
                  data:
                    type: array
                    items:
                      $ref: './swagger/components/schemas/Contact.yaml'
        '401': { description: Неавторизований }
        '500': { description: Внутрішня помилка сервера }

    post:
      tags: [Contacts]
      summary: Створити новий контакт
      operationId: createContact
      description: Додає новий контакт.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, phone]
              properties:
                name: { type: string, example: John Doe }
                email:
                  { type: string, format: email, example: john.doe@example.com }
                phone: { type: string, example: '+1234567890' }
      responses:
        '201':
          description: Контакт створено
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: integer, example: 201 }
                  message:
                    { type: string, example: 'Successfully created contact!' }
                  data:
                    $ref: './swagger/components/schemas/Contact.yaml'
        '400': { description: Невірні дані запиту }
        '401': { description: Неавторизований }
        '500': { description: Внутрішня помилка сервера }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
